{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/apps/admin/middleware.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport type { NextRequest } from 'next/server';\r\n\r\n// Routes that don't require authentication\r\nconst PUBLIC_ROUTES = ['/login'];\r\n\r\n// Routes that require authentication\r\nconst PROTECTED_ROUTES = [\r\n  '/dashboard',\r\n  '/universities',\r\n  '/feature-toggles',\r\n  '/change-requests',\r\n  '/billing',\r\n  '/invoices',\r\n  '/audit-log',\r\n  '/backups',\r\n];\r\n\r\nexport function middleware(request: NextRequest) {\r\n  const { pathname } = request.nextUrl;\r\n  \r\n  // Check if the route is public\r\n  const isPublicRoute = PUBLIC_ROUTES.some(route => pathname.startsWith(route));\r\n  \r\n  // Check if the route is protected\r\n  const isProtectedRoute = PROTECTED_ROUTES.some(route => pathname.startsWith(route));\r\n  \r\n  // Get auth token from cookies\r\n  const authToken = request.cookies.get('auth-storage')?.value;\r\n  \r\n  let isAuthenticated = false;\r\n  if (authToken) {\r\n    try {\r\n      const authData = JSON.parse(authToken);\r\n      isAuthenticated = authData.state?.isAuthenticated && authData.state?.token;\r\n    } catch (e) {\r\n      // Invalid token format\r\n      isAuthenticated = false;\r\n    }\r\n  }\r\n  \r\n  // Redirect to login if accessing protected route without auth\r\n  if (isProtectedRoute && !isAuthenticated) {\r\n    const loginUrl = new URL('/login', request.url);\r\n    loginUrl.searchParams.set('redirect', pathname);\r\n    return NextResponse.redirect(loginUrl);\r\n  }\r\n  \r\n  // Redirect to dashboard if accessing login while authenticated\r\n  if (isPublicRoute && isAuthenticated && pathname === '/login') {\r\n    return NextResponse.redirect(new URL('/dashboard', request.url));\r\n  }\r\n  \r\n  // Redirect root to dashboard or login based on auth status\r\n  if (pathname === '/') {\r\n    const redirectUrl = new URL(isAuthenticated ? '/dashboard' : '/login', request.url);\r\n    return NextResponse.redirect(redirectUrl);\r\n  }\r\n  \r\n  return NextResponse.next();\r\n}\r\n\r\nexport const config = {\r\n  matcher: [\r\n    /*\r\n     * Match all request paths except:\r\n     * - _next/static (static files)\r\n     * - _next/image (image optimization files)\r\n     * - favicon.ico (favicon file)\r\n     * - public folder\r\n     */\r\n    '/((?!_next/static|_next/image|favicon.ico|.*\\\\..*|api).*)',\r\n  ],\r\n};\r\n"],"names":[],"mappings":";;;;;;AAAA;AAAA;;AAGA,2CAA2C;AAC3C,MAAM,gBAAgB;IAAC;CAAS;AAEhC,qCAAqC;AACrC,MAAM,mBAAmB;IACvB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAEM,SAAS,WAAW,OAAoB;IAC7C,MAAM,EAAE,QAAQ,EAAE,GAAG,QAAQ,OAAO;IAEpC,+BAA+B;IAC/B,MAAM,gBAAgB,cAAc,IAAI,CAAC,CAAA,QAAS,SAAS,UAAU,CAAC;IAEtE,kCAAkC;IAClC,MAAM,mBAAmB,iBAAiB,IAAI,CAAC,CAAA,QAAS,SAAS,UAAU,CAAC;IAE5E,8BAA8B;IAC9B,MAAM,YAAY,QAAQ,OAAO,CAAC,GAAG,CAAC,iBAAiB;IAEvD,IAAI,kBAAkB;IACtB,IAAI,WAAW;QACb,IAAI;YACF,MAAM,WAAW,KAAK,KAAK,CAAC;YAC5B,kBAAkB,SAAS,KAAK,EAAE,mBAAmB,SAAS,KAAK,EAAE;QACvE,EAAE,OAAO,GAAG;YACV,uBAAuB;YACvB,kBAAkB;QACpB;IACF;IAEA,8DAA8D;IAC9D,IAAI,oBAAoB,CAAC,iBAAiB;QACxC,MAAM,WAAW,IAAI,IAAI,UAAU,QAAQ,GAAG;QAC9C,SAAS,YAAY,CAAC,GAAG,CAAC,YAAY;QACtC,OAAO,4YAAY,CAAC,QAAQ,CAAC;IAC/B;IAEA,+DAA+D;IAC/D,IAAI,iBAAiB,mBAAmB,aAAa,UAAU;QAC7D,OAAO,4YAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,cAAc,QAAQ,GAAG;IAChE;IAEA,2DAA2D;IAC3D,IAAI,aAAa,KAAK;QACpB,MAAM,cAAc,IAAI,IAAI,kBAAkB,eAAe,UAAU,QAAQ,GAAG;QAClF,OAAO,4YAAY,CAAC,QAAQ,CAAC;IAC/B;IAEA,OAAO,4YAAY,CAAC,IAAI;AAC1B;AAEO,MAAM,SAAS;IACpB,SAAS;QACP;;;;;;KAMC,GACD;KACD;AACH"}}]
}