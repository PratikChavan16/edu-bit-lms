openapi: 3.1.0
info:
  title: College Accounts Admin Portal API
  version: 1.0.0
  description: |
    RESTful API for College Accounts Admin Portal - College-level financial management system for expense tracking, vendor payments, budget monitoring, financial reporting, and day-to-day accounting operations.
    
    **Business Context:**
    - Annual College Budget: ₹12 Crores
    - Expense Transactions: 3,000+ transactions/year
    - Vendors Managed: 80+ active vendors
    - Purchase Orders: 500+ POs/year
    - Invoice Processing: 2,500+ invoices/year
    - Financial Reports: 100+ reports/year
    
  contact:
    name: BitFlow Nova LMS - College Accounts Admin Team
    email: accounts-admin@bitflownova.edu
  license:
    name: Proprietary
    
servers:
  - url: http://localhost:3012/api
    description: Local development server
  - url: https://staging-accounts-admin.bitflownova.edu/api
    description: Staging server
  - url: https://accounts-admin.bitflownova.edu/api
    description: Production server

tags:
  - name: Authentication
    description: User authentication and session management
  - name: Expenses
    description: Expense recording, tracking, and approval workflows
  - name: Vendors
    description: Vendor master data management and payment processing
  - name: Purchase Orders
    description: Purchase order creation, approval, and tracking
  - name: Invoices
    description: Invoice management and payment scheduling
  - name: Payments
    description: Payment execution, NEFT processing, and reconciliation
  - name: Budgets
    description: Budget allocation, monitoring, and variance analysis
  - name: Financial Reports
    description: P&L, Balance Sheet, Cash Flow, and variance reports
  - name: GL Codes
    description: General Ledger code management and mapping
  - name: Bank Accounts
    description: College bank account management and reconciliation
  - name: Approvals
    description: Multi-level approval workflows for expenses and payments
  - name: Audit Trail
    description: Transaction history and document management

security:
  - bearerAuth: []

paths:
  # ============================================
  # AUTHENTICATION
  # ============================================
  /auth/login:
    post:
      tags: [Authentication]
      summary: Login to College Accounts Admin portal
      description: Authenticate using email/password and receive JWT token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                  example: accounts.admin@college.edu
                password:
                  type: string
                  format: password
                  example: SecurePassword123!
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                      user:
                        $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/logout:
    post:
      tags: [Authentication]
      summary: Logout from portal
      responses:
        '200':
          $ref: '#/components/responses/Success'

  /auth/refresh:
    post:
      tags: [Authentication]
      summary: Refresh access token
      responses:
        '200':
          description: Token refreshed
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string

  # ============================================
  # EXPENSES
  # ============================================
  /expenses:
    get:
      tags: [Expenses]
      summary: List all expenses
      description: Retrieve expenses with filtering, pagination, and sorting
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - name: category
          in: query
          schema:
            type: string
            enum: [salaries, utilities, supplies, maintenance, transport, infrastructure, miscellaneous]
        - name: status
          in: query
          schema:
            type: string
            enum: [draft, pending_approval, approved, rejected, paid]
        - name: from_date
          in: query
          schema:
            type: string
            format: date
        - name: to_date
          in: query
          schema:
            type: string
            format: date
        - name: gl_code
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of expenses
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Expense'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      tags: [Expenses]
      summary: Create new expense
      description: Record a new expense transaction with GL code mapping
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [category, amount, expense_date, description, gl_code]
              properties:
                category:
                  type: string
                  enum: [salaries, utilities, supplies, maintenance, transport, infrastructure, miscellaneous]
                amount:
                  type: number
                  format: decimal
                  example: 25000.00
                expense_date:
                  type: string
                  format: date
                  example: "2025-10-20"
                description:
                  type: string
                  example: Monthly electricity bill
                gl_code:
                  type: string
                  example: EXP-UTL-001
                vendor_id:
                  type: integer
                  example: 45
                payment_mode:
                  type: string
                  enum: [cash, cheque, neft, rtgs, upi]
                invoice_number:
                  type: string
                  example: INV-2025-1234
                receipt_url:
                  type: string
                  format: uri
                notes:
                  type: string
      responses:
        '201':
          description: Expense created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Expense'

  /expenses/{id}:
    get:
      tags: [Expenses]
      summary: Get expense details
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Expense details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Expense'

    put:
      tags: [Expenses]
      summary: Update expense
      description: Update expense (only allowed for draft/rejected expenses)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpenseUpdate'
      responses:
        '200':
          description: Expense updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Expense'

    delete:
      tags: [Expenses]
      summary: Delete expense
      description: Soft delete expense (only draft expenses)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/Success'

  /expenses/{id}/submit:
    post:
      tags: [Expenses]
      summary: Submit expense for approval
      description: Submit draft expense to Principal for approval
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Expense submitted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                    example: Expense submitted for approval

  /expenses/reports/summary:
    get:
      tags: [Expenses]
      summary: Get expense summary report
      description: Category-wise expense breakdown for specified period
      parameters:
        - name: from_date
          in: query
          required: true
          schema:
            type: string
            format: date
        - name: to_date
          in: query
          required: true
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Expense summary
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      total_expenses:
                        type: number
                        example: 2500000.00
                      category_breakdown:
                        type: array
                        items:
                          type: object
                          properties:
                            category:
                              type: string
                            amount:
                              type: number
                            percentage:
                              type: number
                      monthly_trend:
                        type: array
                        items:
                          type: object

  # ============================================
  # VENDORS
  # ============================================
  /vendors:
    get:
      tags: [Vendors]
      summary: List all vendors
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
        - name: status
          in: query
          schema:
            type: string
            enum: [active, inactive, blacklisted]
        - name: category
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of vendors
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Vendor'

    post:
      tags: [Vendors]
      summary: Create new vendor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [vendor_name, contact_person, phone, email, category]
              properties:
                vendor_name:
                  type: string
                  example: ABC Supplies Pvt Ltd
                contact_person:
                  type: string
                  example: Rajesh Kumar
                phone:
                  type: string
                  example: "+919876543210"
                email:
                  type: string
                  format: email
                  example: rajesh@abcsupplies.com
                category:
                  type: string
                  example: Office Supplies
                gst_number:
                  type: string
                  example: 29ABCDE1234F1Z5
                pan_number:
                  type: string
                  example: ABCDE1234F
                bank_account_number:
                  type: string
                bank_name:
                  type: string
                ifsc_code:
                  type: string
                address:
                  type: string
                payment_terms:
                  type: string
                  example: Net 30 days
      responses:
        '201':
          description: Vendor created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Vendor'

  /vendors/{id}:
    get:
      tags: [Vendors]
      summary: Get vendor details
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Vendor details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Vendor'

    put:
      tags: [Vendors]
      summary: Update vendor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VendorUpdate'
      responses:
        '200':
          description: Vendor updated

  /vendors/{id}/payments:
    get:
      tags: [Vendors]
      summary: Get vendor payment history
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Payment history
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Payment'

  # ============================================
  # PURCHASE ORDERS (Truncated for brevity - continues with 50+ endpoints)
  # Full specification available in complete API documentation
  # ============================================

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    page:
      name: page
      in: query
      schema:
        type: integer
        default: 1
    perPage:
      name: per_page
      in: query
      schema:
        type: integer
        default: 20
        maximum: 100

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        role:
          type: string
          enum: [college_accounts_admin]
        college_id:
          type: integer
        college_name:
          type: string
        permissions:
          type: array
          items:
            type: string

    Expense:
      type: object
      properties:
        id:
          type: integer
        expense_number:
          type: string
          example: EXP-2025-001234
        category:
          type: string
        amount:
          type: number
        expense_date:
          type: string
          format: date
        description:
          type: string
        gl_code:
          type: string
        status:
          type: string
        created_at:
          type: string
          format: date-time

    Vendor:
      type: object
      properties:
        id:
          type: integer
        vendor_code:
          type: string
        vendor_name:
          type: string
        contact_person:
          type: string
        phone:
          type: string
        email:
          type: string
        status:
          type: string

    Payment:
      type: object
      properties:
        id:
          type: integer
        payment_number:
          type: string
        amount:
          type: number
        payment_date:
          type: string
          format: date
        status:
          type: string

    Pagination:
      type: object
      properties:
        current_page:
          type: integer
        per_page:
          type: integer
        total:
          type: integer

    ExpenseUpdate:
      type: object
    VendorUpdate:
      type: object

  responses:
    Success:
      description: Operation successful
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string

