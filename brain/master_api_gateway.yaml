openapi: 3.1.0
info:
  title: Bitflow LMS - Master API Gateway
  version: 2.0.0
  description: |
    Unified API Gateway for all 14 Bitflow LMS portals.
    
    ## Architecture
    - **Gateway URL**: https://api.bitflow.edu
    - **Portal Routes**: /portals/{portal-name}/*
    - **Authentication**: Bearer JWT tokens (RS256)
    - **Rate Limiting**: 1000 req/hour per user
    - **Multi-Tenancy**: university_id in JWT claims
    
    ## Portal Ports (Development)
    - Bitflow Admin: http://localhost:3001
    - University Owner: http://localhost:3002
    - Super Admin: http://localhost:3003
    - Principal: http://localhost:3004
    - College Admin: http://localhost:3005
    - Super Academics: http://localhost:3006
    - Faculty: http://localhost:3007
    - Student: http://localhost:3008
    - Parent: http://localhost:3009
    - Admission Admin: http://localhost:3010
    - Super Accountant: http://localhost:3011
    - College Accounts Admin: http://localhost:3012
    - College Fee Admin: http://localhost:3013
    - Super NT Manager: http://localhost:3014

  contact:
    name: Bitflow API Support
    email: api-support@bitflow.edu
    url: https://docs.bitflow.edu
  license:
    name: Proprietary
    url: https://bitflow.edu/license

servers:
  - url: https://api.bitflow.edu/v1
    description: Production API Gateway
  - url: https://staging-api.bitflow.edu/v1
    description: Staging Environment
  - url: http://localhost:8000/api
    description: Local Development

tags:
  - name: Authentication
    description: Login, token refresh, logout
  - name: Universities
    description: University management (Bitflow Admin only)
  - name: Users
    description: User profile and management
  - name: Colleges
    description: College CRUD operations
  - name: Departments
    description: Department management
  - name: Courses
    description: Course catalog
  - name: Students
    description: Student enrollment and records
  - name: Faculty
    description: Faculty management
  - name: Attendance
    description: Attendance tracking
  - name: Grades
    description: Grade management
  - name: Assignments
    description: Assignment creation and submissions
  - name: Fees
    description: Fee structures and payments
  - name: Reports
    description: Analytics and reports
  - name: Notifications
    description: In-app and push notifications
  - name: Files
    description: File upload and management

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT token obtained from /auth/login endpoint.
        Format: `Authorization: Bearer <token>`
        
        Token Claims:
        - sub: user_id (UUID)
        - university_id: UUID
        - role: role_slug (e.g., 'student', 'faculty')
        - exp: expiration timestamp (15 minutes)

  schemas:
    # ============================================================================
    # COMMON SCHEMAS
    # ============================================================================
    
    Error:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          example: "VALIDATION_ERROR"
        message:
          type: string
          example: "The email field is required."
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          example:
            email: ["The email field is required."]
        trace_id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"

    PaginationMeta:
      type: object
      properties:
        current_page:
          type: integer
          example: 1
        per_page:
          type: integer
          example: 20
        total:
          type: integer
          example: 150
        last_page:
          type: integer
          example: 8
        from:
          type: integer
          example: 1
        to:
          type: integer
          example: 20

    UUID:
      type: string
      format: uuid
      example: "550e8400-e29b-41d4-a716-446655440000"

    Timestamp:
      type: string
      format: date-time
      example: "2025-10-25T10:30:00Z"

    # ============================================================================
    # AUTHENTICATION SCHEMAS
    # ============================================================================
    
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "student@demo.edu"
        password:
          type: string
          format: password
          example: "SecurePass123!"
        remember:
          type: boolean
          default: false

    LoginResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        access_token:
          type: string
          example: "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9..."
        refresh_token:
          type: string
          format: uuid
          example: "7c9e6679-7425-40de-944b-e07fc1f90ae7"
        expires_in:
          type: integer
          example: 900
          description: "Token expiry in seconds (15 minutes)"
        token_type:
          type: string
          example: "Bearer"

    RefreshTokenRequest:
      type: object
      required:
        - refresh_token
      properties:
        refresh_token:
          type: string
          format: uuid
          example: "7c9e6679-7425-40de-944b-e07fc1f90ae7"

    # ============================================================================
    # USER SCHEMAS
    # ============================================================================
    
    User:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        university_id:
          $ref: '#/components/schemas/UUID'
        username:
          type: string
          example: "john.doe"
        email:
          type: string
          format: email
          example: "john.doe@demo.edu"
        first_name:
          type: string
          example: "John"
        last_name:
          type: string
          example: "Doe"
        full_name:
          type: string
          example: "John Doe"
        phone:
          type: string
          example: "+1234567890"
        photo_url:
          type: string
          format: uri
          nullable: true
          example: "https://cdn.bitflow.edu/photos/user123.jpg"
        status:
          type: string
          enum: [active, inactive, suspended, deleted]
          example: "active"
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
        created_at:
          $ref: '#/components/schemas/Timestamp'
        updated_at:
          $ref: '#/components/schemas/Timestamp'

    Role:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        name:
          type: string
          example: "Student"
        slug:
          type: string
          example: "student"
        level:
          type: integer
          example: 6

    # ============================================================================
    # UNIVERSITY SCHEMAS
    # ============================================================================
    
    University:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        name:
          type: string
          example: "Demo University"
        slug:
          type: string
          example: "demo-university"
        domain:
          type: string
          example: "demo.edu"
        email:
          type: string
          format: email
          example: "admin@demo.edu"
        phone:
          type: string
          example: "+1234567890"
        status:
          type: string
          enum: [setup, live, suspended, archived]
          example: "live"
        storage_quota_gb:
          type: integer
          example: 1000
        storage_used_mb:
          type: integer
          example: 25600
        created_at:
          $ref: '#/components/schemas/Timestamp'

    CreateUniversityRequest:
      type: object
      required:
        - name
        - email
        - phone
      properties:
        name:
          type: string
          example: "Nova University"
        email:
          type: string
          format: email
          example: "admin@nova.edu"
        phone:
          type: string
          example: "+1234567890"

    # ============================================================================
    # COLLEGE SCHEMAS
    # ============================================================================
    
    College:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        university_id:
          $ref: '#/components/schemas/UUID'
        name:
          type: string
          example: "School of Engineering"
        code:
          type: string
          example: "ENG"
        type:
          type: string
          example: "Engineering"
        email:
          type: string
          format: email
        phone:
          type: string
        status:
          type: string
          enum: [active, inactive, suspended]
        capacity:
          type: integer
          example: 2000
        current_enrollment:
          type: integer
          example: 1750
        created_at:
          $ref: '#/components/schemas/Timestamp'

    CreateCollegeRequest:
      type: object
      required:
        - name
        - code
      properties:
        name:
          type: string
          example: "School of Engineering"
        code:
          type: string
          example: "ENG"
        type:
          type: string
          example: "Engineering"
        email:
          type: string
          format: email
        phone:
          type: string
        capacity:
          type: integer
          example: 2000

    # ============================================================================
    # STUDENT SCHEMAS
    # ============================================================================
    
    Student:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        user_id:
          $ref: '#/components/schemas/UUID'
        university_id:
          $ref: '#/components/schemas/UUID'
        college_id:
          $ref: '#/components/schemas/UUID'
        admission_number:
          type: string
          example: "2025ENG001"
        admission_date:
          type: string
          format: date
          example: "2025-08-15"
        course:
          type: string
          example: "B.Tech Computer Science"
        year:
          type: integer
          example: 2
        section:
          type: string
          example: "A"
        roll_number:
          type: string
          example: "CS-2023-042"
        status:
          type: string
          enum: [active, suspended, graduated, dropped]
        user:
          $ref: '#/components/schemas/User'
        college:
          $ref: '#/components/schemas/College'

    CreateStudentRequest:
      type: object
      required:
        - first_name
        - last_name
        - email
        - college_id
        - admission_number
        - course
        - year
      properties:
        first_name:
          type: string
          example: "Alice"
        last_name:
          type: string
          example: "Johnson"
        email:
          type: string
          format: email
          example: "alice.johnson@demo.edu"
        phone:
          type: string
          example: "+1234567890"
        college_id:
          $ref: '#/components/schemas/UUID'
        admission_number:
          type: string
          example: "2025ENG001"
        admission_date:
          type: string
          format: date
          example: "2025-08-15"
        course:
          type: string
          example: "B.Tech Computer Science"
        year:
          type: integer
          minimum: 1
          maximum: 6
        section:
          type: string

    # ============================================================================
    # ATTENDANCE SCHEMAS
    # ============================================================================
    
    Attendance:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        student_id:
          $ref: '#/components/schemas/UUID'
        course_id:
          $ref: '#/components/schemas/UUID'
        class_date:
          type: string
          format: date
          example: "2025-10-25"
        status:
          type: string
          enum: [present, absent, late, excused]
          example: "present"
        marked_by:
          $ref: '#/components/schemas/UUID'
        marked_at:
          $ref: '#/components/schemas/Timestamp'

    MarkAttendanceRequest:
      type: object
      required:
        - course_id
        - class_date
        - attendance_records
      properties:
        course_id:
          $ref: '#/components/schemas/UUID'
        class_date:
          type: string
          format: date
          example: "2025-10-25"
        attendance_records:
          type: array
          items:
            type: object
            required:
              - student_id
              - status
            properties:
              student_id:
                $ref: '#/components/schemas/UUID'
              status:
                type: string
                enum: [present, absent, late, excused]
              remarks:
                type: string

    # ============================================================================
    # GRADE SCHEMAS
    # ============================================================================
    
    Grade:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        enrollment_id:
          $ref: '#/components/schemas/UUID'
        assessment_type:
          type: string
          enum: [midterm, final, assignment, quiz, project]
          example: "midterm"
        assessment_name:
          type: string
          example: "Midterm Exam - Data Structures"
        max_marks:
          type: number
          format: decimal
          example: 100.00
        obtained_marks:
          type: number
          format: decimal
          example: 87.50
        weightage:
          type: number
          format: decimal
          example: 30.00
        graded_by:
          $ref: '#/components/schemas/UUID'
        graded_at:
          $ref: '#/components/schemas/Timestamp'

    CreateGradeRequest:
      type: object
      required:
        - enrollment_id
        - assessment_type
        - max_marks
        - obtained_marks
      properties:
        enrollment_id:
          $ref: '#/components/schemas/UUID'
        assessment_type:
          type: string
          enum: [midterm, final, assignment, quiz, project]
        assessment_name:
          type: string
        max_marks:
          type: number
          format: decimal
        obtained_marks:
          type: number
          format: decimal
        weightage:
          type: number
          format: decimal
        remarks:
          type: string

    # ============================================================================
    # FEE SCHEMAS
    # ============================================================================
    
    FeePayment:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        student_id:
          $ref: '#/components/schemas/UUID'
        fee_structure_id:
          $ref: '#/components/schemas/UUID'
        amount_paid:
          type: number
          format: decimal
          example: 5000.00
        payment_date:
          $ref: '#/components/schemas/Timestamp'
        payment_method:
          type: string
          enum: [online, cash, cheque, card]
        transaction_id:
          type: string
          example: "TXN20251025123456"
        receipt_number:
          type: string
          example: "RCP/2025/001234"
        status:
          type: string
          enum: [pending, completed, failed, refunded]

    CreateFeePaymentRequest:
      type: object
      required:
        - student_id
        - fee_structure_id
        - amount_paid
        - payment_method
      properties:
        student_id:
          $ref: '#/components/schemas/UUID'
        fee_structure_id:
          $ref: '#/components/schemas/UUID'
        amount_paid:
          type: number
          format: decimal
        payment_method:
          type: string
          enum: [online, cash, cheque, card]
        transaction_id:
          type: string
        installment_number:
          type: integer

    # ============================================================================
    # NOTIFICATION SCHEMAS
    # ============================================================================
    
    Notification:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        user_id:
          $ref: '#/components/schemas/UUID'
        type:
          type: string
          example: "grade_updated"
        title:
          type: string
          example: "New Grade Posted"
        message:
          type: string
          example: "Your grade for Midterm Exam has been posted."
        action_url:
          type: string
          format: uri
          nullable: true
        is_read:
          type: boolean
          example: false
        priority:
          type: string
          enum: [low, normal, high, urgent]
        created_at:
          $ref: '#/components/schemas/Timestamp'

  responses:
    Unauthorized:
      description: Unauthorized - Invalid or expired token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "UNAUTHORIZED"
            message: "Invalid or expired token"

    Forbidden:
      description: Forbidden - Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "FORBIDDEN"
            message: "You do not have permission to access this resource"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "NOT_FOUND"
            message: "The requested resource was not found"

    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "VALIDATION_ERROR"
            message: "The given data was invalid"
            errors:
              email: ["The email field is required."]

    RateLimitExceeded:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "RATE_LIMIT_EXCEEDED"
            message: "Too many requests. Please try again later."
      headers:
        X-RateLimit-Limit:
          schema:
            type: integer
          description: Request limit per hour
        X-RateLimit-Remaining:
          schema:
            type: integer
          description: Remaining requests
        X-RateLimit-Reset:
          schema:
            type: integer
          description: Time when limit resets (Unix timestamp)

# ============================================================================
# API ENDPOINTS
# ============================================================================

paths:
  # ============================================================================
  # AUTHENTICATION
  # ============================================================================
  
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and obtain access token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          $ref: '#/components/responses/ValidationError'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Get new access token using refresh token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout user
      description: Invalidate current session and tokens
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logged out successfully"
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/me:
    get:
      tags:
        - Authentication
      summary: Get current user
      description: Retrieve authenticated user details
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # ============================================================================
  # UNIVERSITIES (Bitflow Admin only)
  # ============================================================================
  
  /admin/university:
    get:
      tags:
        - Universities
      summary: Get current university
      description: Retrieve the single university instance
      responses:
        '200':
          description: University details
          content:
            application/json:
              schema:
                type: object
                properties:
                  university:
                    $ref: '#/components/schemas/University'
        '404':
          $ref: '#/components/responses/NotFound'

    post:
      tags:
        - Universities
      summary: Create university
      description: Create the single university instance (one-time operation)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUniversityRequest'
      responses:
        '201':
          description: University created
          content:
            application/json:
              schema:
                type: object
                properties:
                  university:
                    $ref: '#/components/schemas/University'
                  credentials:
                    type: object
                    properties:
                      email:
                        type: string
                      password:
                        type: string
                      role:
                        type: string
        '422':
          $ref: '#/components/responses/ValidationError'

  # ============================================================================
  # STUDENTS
  # ============================================================================
  
  /students:
    get:
      tags:
        - Students
      summary: List students
      description: Get paginated list of students (filtered by role permissions)
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: per_page
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
        - name: college_id
          in: query
          schema:
            type: string
            format: uuid
        - name: year
          in: query
          schema:
            type: integer
        - name: status
          in: query
          schema:
            type: string
            enum: [active, suspended, graduated, dropped]
        - name: search
          in: query
          schema:
            type: string
          description: Search by name, email, or admission number
      responses:
        '200':
          description: List of students
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Student'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'

    post:
      tags:
        - Students
      summary: Create student
      description: Register a new student
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStudentRequest'
      responses:
        '201':
          description: Student created
          content:
            application/json:
              schema:
                type: object
                properties:
                  student:
                    $ref: '#/components/schemas/Student'
                  credentials:
                    type: object
                    properties:
                      username:
                        type: string
                      password:
                        type: string
        '422':
          $ref: '#/components/responses/ValidationError'

  /students/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    
    get:
      tags:
        - Students
      summary: Get student details
      responses:
        '200':
          description: Student details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - Students
      summary: Update student
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStudentRequest'
      responses:
        '200':
          description: Student updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Students
      summary: Delete student
      responses:
        '204':
          description: Student deleted
        '404':
          $ref: '#/components/responses/NotFound'

  # ============================================================================
  # ATTENDANCE
  # ============================================================================
  
  /attendance:
    post:
      tags:
        - Attendance
      summary: Mark attendance
      description: Mark attendance for multiple students in a class
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MarkAttendanceRequest'
      responses:
        '201':
          description: Attendance marked
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  records_created:
                    type: integer

  /attendance/student/{student_id}:
    parameters:
      - name: student_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: start_date
        in: query
        schema:
          type: string
          format: date
      - name: end_date
        in: query
        schema:
          type: string
          format: date
      - name: course_id
        in: query
        schema:
          type: string
          format: uuid
    
    get:
      tags:
        - Attendance
      summary: Get student attendance
      description: Retrieve attendance records for a specific student
      responses:
        '200':
          description: Attendance records
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Attendance'
                  summary:
                    type: object
                    properties:
                      total_classes:
                        type: integer
                      present:
                        type: integer
                      absent:
                        type: integer
                      attendance_percentage:
                        type: number
                        format: decimal

  # ============================================================================
  # GRADES
  # ============================================================================
  
  /grades:
    post:
      tags:
        - Grades
      summary: Create grade
      description: Add grade for a student assessment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGradeRequest'
      responses:
        '201':
          description: Grade created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Grade'

  /grades/student/{student_id}:
    parameters:
      - name: student_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    
    get:
      tags:
        - Grades
      summary: Get student grades
      description: Retrieve all grades for a specific student
      responses:
        '200':
          description: Student grades
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Grade'
                  gpa:
                    type: number
                    format: decimal
                    example: 3.75

  # ============================================================================
  # NOTIFICATIONS
  # ============================================================================
  
  /notifications:
    get:
      tags:
        - Notifications
      summary: List notifications
      description: Get user's notifications (paginated)
      parameters:
        - name: unread_only
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Notifications list
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Notification'
                  unread_count:
                    type: integer

  /notifications/{id}/read:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    
    post:
      tags:
        - Notifications
      summary: Mark as read
      description: Mark a notification as read
      responses:
        '200':
          description: Notification marked as read
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /notifications/read-all:
    post:
      tags:
        - Notifications
      summary: Mark all as read
      description: Mark all notifications as read for the current user
      responses:
        '200':
          description: All notifications marked as read
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  marked_count:
                    type: integer

# ============================================================================
# WEBHOOKS (For external integrations)
# ============================================================================

webhooks:
  studentEnrolled:
    post:
      summary: Student enrollment event
      description: Triggered when a new student is enrolled
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                event:
                  type: string
                  example: "student.enrolled"
                timestamp:
                  $ref: '#/components/schemas/Timestamp'
                data:
                  $ref: '#/components/schemas/Student'
      responses:
        '200':
          description: Webhook received

  gradePosted:
    post:
      summary: Grade posted event
      description: Triggered when a grade is posted
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                event:
                  type: string
                  example: "grade.posted"
                timestamp:
                  $ref: '#/components/schemas/Timestamp'
                data:
                  $ref: '#/components/schemas/Grade'
      responses:
        '200':
          description: Webhook received
