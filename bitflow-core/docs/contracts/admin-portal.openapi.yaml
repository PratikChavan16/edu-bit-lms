openapi: 3.1.0
info:
  title: Bitflow Nova Admin API
  version: 0.1.0
  description: |
    Contract-first specification for the Bitflow Nova central operations ("admin") portal.
    The API enables Bitflow staff to manage universities, feature flags, billing, backups,
    and compliance artefacts from a single control plane.
  contact:
    name: Bitflow Platform Team
    email: platform@bitflow.example
servers:
  - url: https://api.bitflow.test
    description: Local / development environment
  - url: https://api.bitflow.staging
    description: Staging environment
  - url: https://api.bitflow.prod
    description: Production environment
security:
  - bearerAuth: []
tags:
  - name: Dashboard
    description: Summary metrics and activity timelines for Bitflow operators.
  - name: Universities
    description: Provisioning, listing, and detail views for university tenants.
  - name: FeatureToggles
    description: Control feature rollout and overrides.
  - name: ChangeRequests
    description: Kanban workflow for provisioning and configuration approvals.
  - name: Billing
    description: Revenue, spend, and invoice management.
  - name: Backups
    description: Snapshot orchestration and monitoring.
  - name: Audit
    description: Immutable activity trails across the Bitflow estate.
paths:
  /admin/dashboard:
    get:
      summary: Fetch dashboard summary
      operationId: getAdminDashboard
      tags: [Dashboard]
      parameters:
        - in: query
          name: since
          description: ISO8601 timestamp to bound the recent activity timeline.
          required: false
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Dashboard metrics and recent activity feed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardSummary'
  /admin/operations/alerts:
    get:
      summary: List infrastructure and integration alerts
      operationId: listOperationsAlerts
      tags: [Dashboard]
      parameters:
        - in: query
          name: severity
          description: Filter alerts by severity level.
          required: false
          schema:
            $ref: '#/components/schemas/AlertSeverity'
      responses:
        '200':
          description: Collection of active alerts.
          content:
            application/json:
              schema:
                type: object
                required: [alerts]
                properties:
                  alerts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Alert'
  /admin/universities:
    get:
      summary: List universities
      operationId: listUniversities
      tags: [Universities]
      parameters:
        - in: query
          name: status
          description: Filter tenants by operational status.
          schema:
            $ref: '#/components/schemas/UniversityStatus'
        - in: query
          name: search
          description: Case-insensitive search across name, domain, or tags.
          schema:
            type: string
        - in: query
          name: region
          description: Region code (e.g., IN-W, US-E) for data residency.
          schema:
            type: string
            pattern: '^[A-Z]{2}-[A-Z]$'
        - in: query
          name: subscriptionTier
          description: Subscription plan filter (basic/standard/premium/custom).
          schema:
            $ref: '#/components/schemas/SubscriptionTier'
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
        - in: query
          name: pageSize
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 25
      responses:
        '200':
          description: Paginated list of universities.
          headers:
            X-Total-Count:
              description: Total count of matching tenants.
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UniversityListItem'
  /admin/universities/{universityId}:
    get:
      summary: Fetch university detail
      operationId: getUniversityDetail
      tags: [Universities]
      parameters:
        - $ref: '#/components/parameters/UniversityId'
      responses:
        '200':
          description: Rich detail for the university including modules and usage metrics.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UniversityDetail'
  /admin/universities/{universityId}/feature-toggles:
    get:
      summary: List feature toggles for a specific university including overrides
      operationId: listUniversityFeatureToggles
      tags: [FeatureToggles]
      parameters:
        - $ref: '#/components/parameters/UniversityId'
      responses:
        '200':
          description: Feature toggles with inherited and overridden state.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FeatureToggle'
  /admin/feature-toggles:
    get:
      summary: List global feature toggles
      operationId: listFeatureToggles
      tags: [FeatureToggles]
      parameters:
        - in: query
          name: category
          schema:
            type: string
        - in: query
          name: q
          description: Free-text search across code and label.
          schema:
            type: string
      responses:
        '200':
          description: All feature toggles defined in the control plane.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FeatureToggle'
    post:
      summary: Create a new feature toggle definition
      operationId: createFeatureToggle
      tags: [FeatureToggles]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeatureToggleCreatePayload'
      responses:
        '201':
          description: Feature toggle created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureToggle'
  /admin/feature-toggles/{code}:
    patch:
      summary: Update feature toggle state or metadata
      operationId: updateFeatureToggle
      tags: [FeatureToggles]
      parameters:
        - name: code
          in: path
          required: true
          description: Stable feature code identifier.
          schema:
            type: string
            pattern: '^[A-Z0-9_]+$'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeatureToggleUpdatePayload'
      responses:
        '200':
          description: Updated feature toggle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureToggle'
  /admin/change-requests:
    get:
      summary: List change requests grouped by status column
      operationId: listChangeRequests
      tags: [ChangeRequests]
      parameters:
        - in: query
          name: scope
          description: Filter by scope (global/university/college/module).
          schema:
            $ref: '#/components/schemas/ChangeRequestScope'
        - in: query
          name: assignee
          description: Filter by current owner or reviewer uuid.
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Kanban board payload for change requests.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeRequestBoard'
    post:
      summary: Submit a new change request
      operationId: createChangeRequest
      tags: [ChangeRequests]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeRequestCreatePayload'
      responses:
        '201':
          description: Change request created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeRequest'
  /admin/change-requests/{id}:
    patch:
      summary: Update change request details
      operationId: updateChangeRequest
      tags: [ChangeRequests]
      parameters:
        - $ref: '#/components/parameters/ChangeRequestId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeRequestUpdatePayload'
      responses:
        '200':
          description: Updated change request payload.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeRequest'
  /admin/change-requests/{id}/decisions:
    post:
      summary: Record an approval decision for a change request
      operationId: decideChangeRequest
      tags: [ChangeRequests]
      parameters:
        - $ref: '#/components/parameters/ChangeRequestId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeRequestDecisionPayload'
      responses:
        '200':
          description: Change request with updated status and audit trail.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeRequest'
  /admin/billing/summary:
    get:
      summary: Retrieve billing dashboard summary metrics
      operationId: getBillingSummary
      tags: [Billing]
      parameters:
        - in: query
          name: period
          description: Reporting period (month) in YYYY-MM format.
          schema:
            type: string
            pattern: '^[0-9]{4}-[0-9]{2}$'
      responses:
        '200':
          description: Aggregated billing metrics for the selected period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillingSummary'
  /admin/billing/invoices:
    get:
      summary: List invoices visible to Bitflow operators
      operationId: listBillingInvoices
      tags: [Billing]
      parameters:
        - in: query
          name: status
          schema:
            $ref: '#/components/schemas/InvoiceStatus'
        - in: query
          name: universityId
          schema:
            type: string
            format: uuid
        - in: query
          name: dueBefore
          schema:
            type: string
            format: date
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
        - in: query
          name: pageSize
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 25
      responses:
        '200':
          description: Paginated invoice collection.
          headers:
            X-Total-Count:
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Invoice'
    post:
      summary: Create a draft invoice
      operationId: createInvoice
      tags: [Billing]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoiceCreatePayload'
      responses:
        '201':
          description: Invoice created in draft state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
  /admin/billing/invoices/{invoiceId}:
    patch:
      summary: Update invoice state or details
      operationId: updateInvoice
      tags: [Billing]
      parameters:
        - $ref: '#/components/parameters/InvoiceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoiceUpdatePayload'
      responses:
        '200':
          description: Updated invoice.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
  /admin/backups:
    get:
      summary: List recent backups across tenants
      operationId: listBackups
      tags: [Backups]
      parameters:
        - in: query
          name: universityId
          schema:
            type: string
            format: uuid
        - in: query
          name: status
          schema:
            $ref: '#/components/schemas/BackupStatus'
      responses:
        '200':
          description: Recent backup jobs.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BackupJob'
    post:
      summary: Trigger an on-demand global backup
      operationId: triggerBackup
      tags: [Backups]
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                scope:
                  type: string
                  description: Optional scope override (global/university/college).
                  enum: [global, university, college]
                targetId:
                  type: string
                  format: uuid
                  description: Required when scope is university or college.
      responses:
        '202':
          description: Backup job accepted for processing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupJob'
  /admin/universities/{universityId}/backups:
    post:
      summary: Trigger a scoped backup for a specific university
      operationId: triggerUniversityBackup
      tags: [Backups]
      parameters:
        - $ref: '#/components/parameters/UniversityId'
      responses:
        '202':
          description: Scoped backup job accepted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupJob'
  /admin/audit-logs:
    get:
      summary: Search audit logs across the Bitflow estate
      operationId: searchAuditLogs
      tags: [Audit]
      parameters:
        - in: query
          name: actor
          description: Filter by user UUID or service principal.
          schema:
            type: string
        - in: query
          name: role
          description: Optional actor role filter.
          schema:
            type: string
        - in: query
          name: action
          description: Machine action key (e.g., FEATURE_TOGGLE_UPDATED).
          schema:
            type: string
        - in: query
          name: from
          description: Start of time range.
          schema:
            type: string
            format: date-time
        - in: query
          name: to
          description: End of time range.
          schema:
            type: string
            format: date-time
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
        - in: query
          name: pageSize
          schema:
            type: integer
            minimum: 1
            maximum: 200
            default: 50
      responses:
        '200':
          description: Paginated audit log entries.
          headers:
            X-Total-Count:
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuditLogEntry'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    UniversityId:
      name: universityId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    ChangeRequestId:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
    InvoiceId:
      name: invoiceId
      in: path
      required: true
      schema:
        type: string
        format: uuid
  schemas:
    AlertSeverity:
      type: string
      enum: [info, warning, danger, success]
    DashboardSummary:
      type: object
      required: [welcome, metrics, activities, provisioningQueue]
      properties:
        welcome:
          type: object
          required: [operatorName, pendingTasks, message]
          properties:
            operatorName:
              type: string
            pendingTasks:
              type: integer
              minimum: 0
            message:
              type: string
        metrics:
          type: array
          items:
            $ref: '#/components/schemas/DashboardMetric'
        activities:
          type: array
          description: Reverse chronological activity feed (max 50 entries).
          items:
            $ref: '#/components/schemas/DashboardActivity'
        provisioningQueue:
          type: object
          required: [items]
          properties:
            slaBreached:
              type: integer
              minimum: 0
            items:
              type: array
              items:
                $ref: '#/components/schemas/ProvisioningTask'
    DashboardMetric:
      type: object
      required: [label, value]
      properties:
        label:
          type: string
        value:
          type: string
        delta:
          type: string
          description: Human readable trend.
    DashboardActivity:
      type: object
      required: [title, description, occurredAt]
      properties:
        title:
          type: string
        description:
          type: string
        occurredAt:
          type: string
          format: date-time
        actor:
          type: string
          description: Actor display name or service principal key.
    ProvisioningTask:
      type: object
      required: [id, summary, priority, slaDueAt]
      properties:
        id:
          type: string
          format: uuid
        summary:
          type: string
        priority:
          type: string
          enum: [low, medium, high, critical]
        universityName:
          type: string
        slaDueAt:
          type: string
          format: date-time
    Alert:
      type: object
      required: [id, title, severity, description, detectedAt]
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        severity:
          $ref: '#/components/schemas/AlertSeverity'
        description:
          type: string
        source:
          type: string
          description: Upstream integration or service emitting the alert.
        detectedAt:
          type: string
          format: date-time
    UniversityStatus:
      type: string
      enum: [provisioning, live, suspended, archived]
    SubscriptionTier:
      type: string
      enum: [basic, standard, premium, custom]
    UniversityListItem:
      type: object
      required: [id, name, domain, status, collegesCount, storageUsedGb, lastBackupAt]
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        domain:
          type: string
          format: hostname
        status:
          $ref: '#/components/schemas/UniversityStatus'
        collegesCount:
          type: integer
          minimum: 0
        storageUsedGb:
          type: number
          format: float
        lastBackupAt:
          type: string
          format: date-time
        subscriptionTier:
          $ref: '#/components/schemas/SubscriptionTier'
        featureFlagsEnabled:
          type: integer
          description: Count of active features.
    UniversityDetail:
      type: object
      required: [id, name, domain, status, contacts, stats]
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        domain:
          type: string
          format: hostname
        status:
          $ref: '#/components/schemas/UniversityStatus'
        region:
          type: string
        createdAt:
          type: string
          format: date-time
        contacts:
          type: array
          items:
            $ref: '#/components/schemas/Contact'
        stats:
          type: object
          required: [colleges, activeUsers, monthlySpend]
          properties:
            colleges:
              type: integer
            activeUsers:
              type: integer
            monthlySpend:
              type: number
              format: float
            storageUsedGb:
              type: number
              format: float
        modules:
          type: array
          items:
            $ref: '#/components/schemas/ModuleToggle'
        backups:
          type: array
          items:
            $ref: '#/components/schemas/BackupJob'
        audit:
          type: array
          items:
            $ref: '#/components/schemas/AuditLogEntry'
    Contact:
      type: object
      required: [name, email]
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
        phone:
          type: string
    ModuleToggle:
      type: object
      required: [code, label, state]
      properties:
        code:
          type: string
        label:
          type: string
        state:
          type: string
          enum: [enabled, disabled, preview]
        scope:
          type: string
        lastChangedAt:
          type: string
          format: date-time
        lastChangedBy:
          type: string
    FeatureToggle:
      type: object
      required: [code, name, description, state, defaultState]
      properties:
        code:
          type: string
        name:
          type: string
        description:
          type: string
        category:
          type: string
        state:
          type: string
          enum: [on, off, preview]
        defaultState:
          type: string
          enum: [on, off, preview]
        scope:
          type: string
          enum: [global, university, college]
        rolloutType:
          type: string
          enum: [gradual, toggle, beta]
        dependencies:
          type: array
          items:
            type: string
        locked:
          type: boolean
        audit:
          type: array
          items:
            $ref: '#/components/schemas/AuditLogEntry'
    FeatureToggleCreatePayload:
      type: object
      required: [code, name, description, defaultState, scope]
      properties:
        code:
          type: string
          pattern: '^[A-Z0-9_]+$'
        name:
          type: string
        description:
          type: string
        defaultState:
          type: string
          enum: [on, off, preview]
        scope:
          type: string
          enum: [global, university, college]
        rolloutType:
          type: string
          enum: [gradual, toggle, beta]
        dependencies:
          type: array
          items:
            type: string
    FeatureToggleUpdatePayload:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        state:
          type: string
          enum: [on, off, preview]
        rolloutType:
          type: string
          enum: [gradual, toggle, beta]
        dependencies:
          type: array
          items:
            type: string
        locked:
          type: boolean
    ChangeRequestScope:
      type: string
      enum: [global, university, college, module]
    ChangeRequestBoard:
      type: object
      required: [columns]
      properties:
        columns:
          type: array
          items:
            type: object
            required: [status, items]
            properties:
              status:
                $ref: '#/components/schemas/ChangeRequestStatus'
              items:
                type: array
                items:
                  $ref: '#/components/schemas/ChangeRequestCard'
    ChangeRequestStatus:
      type: string
      enum: [pending, in_review, approved, rejected]
    ChangeRequestCard:
      type: object
      required: [id, title, scope, requestedBy, submittedAt, costImpact]
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        scope:
          type: string
        requestedBy:
          type: string
        submittedAt:
          type: string
          format: date-time
        costImpact:
          type: string
        priority:
          type: string
          enum: [low, medium, high]
        dependsOn:
          type: array
          items:
            type: string
        notes:
          type: string
    ChangeRequest:
      allOf:
        - $ref: '#/components/schemas/ChangeRequestCard'
        - type: object
          required: [description, status, history]
          properties:
            description:
              type: string
            status:
              $ref: '#/components/schemas/ChangeRequestStatus'
            history:
              type: array
              items:
                $ref: '#/components/schemas/DecisionEvent'
    ChangeRequestCreatePayload:
      type: object
      required: [title, scope, requestedBy, summary]
      properties:
        title:
          type: string
        scope:
          $ref: '#/components/schemas/ChangeRequestScope'
        requestedBy:
          type: string
          format: uuid
        summary:
          type: string
        costImpact:
          type: string
        effectiveDate:
          type: string
          format: date-time
        notes:
          type: string
    ChangeRequestUpdatePayload:
      type: object
      properties:
        title:
          type: string
        summary:
          type: string
        costImpact:
          type: string
        priority:
          type: string
          enum: [low, medium, high]
        dependsOn:
          type: array
          items:
            type: string
    ChangeRequestDecisionPayload:
      type: object
      required: [decision, decidedBy]
      properties:
        decision:
          type: string
          enum: [approve, reject, request_changes]
        decidedBy:
          type: string
          format: uuid
        comment:
          type: string
    DecisionEvent:
      type: object
      required: [decision, decidedBy, decidedAt]
      properties:
        decision:
          type: string
          enum: [approve, reject, request_changes]
        decidedBy:
          type: string
        decidedAt:
          type: string
          format: date-time
        comment:
          type: string
    BillingSummary:
      type: object
      required: [period, revenue, infrastructureCost, margin, metrics]
      properties:
        period:
          type: string
        revenue:
          type: number
          format: float
        infrastructureCost:
          type: number
          format: float
        margin:
          type: number
          format: float
        metrics:
          type: array
          items:
            type: object
            required: [label, value, trend]
            properties:
              label:
                type: string
              value:
                type: string
              trend:
                type: string
    InvoiceStatus:
      type: string
      enum: [draft, issued, paid, overdue, void]
    Invoice:
      type: object
      required: [id, universityId, status, amount, currency, issuedOn, dueOn]
      properties:
        id:
          type: string
          format: uuid
        universityId:
          type: string
          format: uuid
        status:
          $ref: '#/components/schemas/InvoiceStatus'
        number:
          type: string
        amount:
          type: number
          format: float
        currency:
          type: string
          pattern: '^[A-Z]{3}$'
        issuedOn:
          type: string
          format: date
        dueOn:
          type: string
          format: date
        lineItems:
          type: array
          items:
            $ref: '#/components/schemas/InvoiceLineItem'
        notes:
          type: string
        documents:
          type: array
          items:
            $ref: '#/components/schemas/DocumentLink'
    InvoiceLineItem:
      type: object
      required: [description, amount]
      properties:
        description:
          type: string
        amount:
          type: number
          format: float
        quantity:
          type: number
          format: float
        metadata:
          type: object
          additionalProperties:
            type: string
    DocumentLink:
      type: object
      required: [name, url]
      properties:
        name:
          type: string
        url:
          type: string
          format: uri
    InvoiceCreatePayload:
      type: object
      required: [universityId, number, amount, currency, dueOn, lineItems]
      properties:
        universityId:
          type: string
          format: uuid
        number:
          type: string
        amount:
          type: number
          format: float
        currency:
          type: string
          pattern: '^[A-Z]{3}$'
        dueOn:
          type: string
          format: date
        lineItems:
          type: array
          items:
            $ref: '#/components/schemas/InvoiceLineItem'
        notes:
          type: string
    InvoiceUpdatePayload:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/InvoiceStatus'
        dueOn:
          type: string
          format: date
        notes:
          type: string
        documents:
          type: array
          items:
            $ref: '#/components/schemas/DocumentLink'
    BackupStatus:
      type: string
      enum: [pending, running, success, failed]
    BackupJob:
      type: object
      required: [id, scope, status, startedAt]
      properties:
        id:
          type: string
          format: uuid
        scope:
          type: string
          enum: [global, university, college]
        targetId:
          type: string
          format: uuid
        status:
          $ref: '#/components/schemas/BackupStatus'
        startedAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
        initiatedBy:
          type: string
        artifactUrl:
          type: string
          format: uri
        notes:
          type: string
    AuditLogEntry:
      type: object
      required: [id, actor, role, action, occurredAt, target]
      properties:
        id:
          type: string
          format: uuid
        actor:
          type: string
        role:
          type: string
        action:
          type: string
        occurredAt:
          type: string
          format: date-time
        target:
          type: object
          required: [type, id]
          properties:
            type:
              type: string
            id:
              type: string
            label:
              type: string
        details:
          type: object
          additionalProperties: {}
