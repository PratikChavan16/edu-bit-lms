openapi: 3.0.3
info:
  title: BitFlow LMS - Authentication API
  description: |
    Authentication endpoints for BitFlow Learning Management System.
    Supports token-based authentication using Laravel Sanctum.
  version: 1.0.0
  contact:
    name: BitFlow API Support
    email: api@bitflow.edu

servers:
  - url: http://localhost:8000/api
    description: Local development server
  - url: https://api.bitflow.edu
    description: Production server

tags:
  - name: Authentication
    description: User authentication endpoints
  - name: Password Management
    description: Password reset and change operations

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and receive API token
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: john.doe@university.edu
                password:
                  type: string
                  format: password
                  example: SecurePassword123!
                device_name:
                  type: string
                  example: iPhone 14
                  description: Optional device identifier for token management
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        example: 1|abc123def456token789
                      token_type:
                        type: string
                        example: Bearer
                      user:
                        $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/InvalidCredentials'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout current device
      description: Revoke the current access token
      operationId: logout
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Successfully logged out
        '401':
          $ref: '#/components/responses/Unauthenticated'

  /auth/logout-all:
    post:
      tags:
        - Authentication
      summary: Logout all devices
      description: Revoke all access tokens for the authenticated user
      operationId: logoutAll
      security:
        - bearerAuth: []
      responses:
        '200':
          description: All tokens revoked
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Successfully logged out from all devices

  /auth/me:
    get:
      tags:
        - Authentication
      summary: Get current user
      description: Retrieve authenticated user profile
      operationId: getCurrentUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh token
      description: Generate a new access token and revoke the old one
      operationId: refreshToken
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                device_name:
                  type: string
                  example: iPhone 14
      responses:
        '200':
          description: Token refreshed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        example: 2|xyz789new456token123
                      token_type:
                        type: string
                        example: Bearer

  /auth/change-password:
    post:
      tags:
        - Password Management
      summary: Change password
      description: Change password for authenticated user
      operationId: changePassword
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - current_password
                - new_password
                - new_password_confirmation
              properties:
                current_password:
                  type: string
                  format: password
                  example: OldPassword123!
                new_password:
                  type: string
                  format: password
                  example: NewPassword456!
                  minLength: 8
                new_password_confirmation:
                  type: string
                  format: password
                  example: NewPassword456!
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Password changed successfully
        '422':
          $ref: '#/components/responses/ValidationError'

  /auth/forgot-password:
    post:
      tags:
        - Password Management
      summary: Request password reset
      description: Send password reset link to user's email
      operationId: forgotPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: john.doe@university.edu
      responses:
        '200':
          description: Reset link sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Password reset link sent to your email
        '429':
          $ref: '#/components/responses/RateLimitExceeded'

  /auth/reset-password:
    post:
      tags:
        - Password Management
      summary: Reset password
      description: Reset password using token from email
      operationId: resetPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - email
                - password
                - password_confirmation
              properties:
                token:
                  type: string
                  example: abc123resettoken456
                email:
                  type: string
                  format: email
                  example: john.doe@university.edu
                password:
                  type: string
                  format: password
                  example: NewPassword789!
                  minLength: 8
                password_confirmation:
                  type: string
                  format: password
                  example: NewPassword789!
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Password reset successfully
        '422':
          $ref: '#/components/responses/ValidationError'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 9d4f5c6e-7a8b-9c0d-1e2f-3a4b5c6d7e8f
        name:
          type: string
          example: John Doe
        email:
          type: string
          format: email
          example: john.doe@university.edu
        phone_number:
          type: string
          example: +1234567890
        date_of_birth:
          type: string
          format: date
          example: 1998-05-15
        gender:
          type: string
          enum: [male, female, other]
          example: male
        status:
          type: string
          enum: [active, inactive, suspended]
          example: active
        last_login_at:
          type: string
          format: date-time
          example: 2024-01-15T10:30:00Z
        role:
          type: object
          properties:
            id:
              type: string
              format: uuid
            name:
              type: string
              example: student
            description:
              type: string

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: 'Token'
      description: 'Enter token received from login endpoint'

  responses:
    InvalidCredentials:
      description: Invalid email or password
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: Invalid credentials

    Unauthenticated:
      description: User not authenticated
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Unauthenticated

    RateLimitExceeded:
      description: Too many requests
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Too many login attempts. Please try again later.

    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: The given data was invalid.
              errors:
                type: object
                additionalProperties:
                  type: array
                  items:
                    type: string
